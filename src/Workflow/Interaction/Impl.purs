module Workflow.Interaction.Impl where

--import Data.Lens
--import Workflow.Interaction
--
--import Control.Monad.Except.Trans (ExceptT)
--import Data.Eq (class Eq)
--import Data.Generic.Rep (class Generic)
--import Data.Identity (Identity)
--import Data.Lens.At (at)
--import Data.Lens.Record (prop)
--import Data.List.NonEmpty (NonEmptyList, foldl, init)
--import Data.Map (Map)
--import Data.Map as Map
--import Data.Maybe (Maybe(..), fromMaybe)
--import Data.Symbol (SProxy(..))
--import Data.Tuple (Tuple(..))
--import Data.Tuple (Tuple)
--import Data.UUID (genUUID)
--import Effect (Effect)
--import Foreign (ForeignError)
--import Foreign.Class (class Encode, class Decode)
--import Foreign.Generic (genericEncode, genericDecode)
--import Foreign.Object (Object)
--import Foreign.Object as Object
--import Prelude (($), (<<<), (>>>), map, bind, pure, unit, show)
--import Workflow.Core (class Edge, class Graph, class Node, NodeId, EdgeId, edgeId, addEdge, deleteNodeId, edgeId, genericEncodeOpts, graphFromJSON, graphToJSON, insertNode, insertNodeId, removeChildren, removeParents, viewId)
--
--
--------
---- Constants
--
--version :: String
--version = "0.00001"
--
--------
---- Types
--
--newtype InteractionState = InteractionState { focus :: Focus InterEdgeImpl
--                                            , highlighted :: NodeIdSet
--                                            }
--
--emptyInteractionState :: InteractionState
--emptyInteractionState = InteractionState { focus : NoFocus
--                                         , highlighted : Map.empty
--                                         }
--
--newtype InterGraphImpl = InterGraphImpl
--  { nodes :: Map NodeId InterNodeImpl
--  , interactionState :: InteractionState
--  }
--
--type InteractionState edgeRow interRow =
--  { focus :: Focus (Edge edgeRow)
--  , highlighted :: Set NodeId
--  | interRow
--  }
--
--emptyInterGraphImpl :: InterGraphImpl
--emptyInterGraphImpl = InterGraphImpl
--  { nodes: Map.empty
--  , interactionState : emptyInteractionState
--  }
--
--newtype InterNodeImpl = InterNodeImpl
--  { id :: NodeId
--  , children :: Map NodeId InterEdgeImpl
--  , parents :: NodeIdSet
--  , subgraph :: InterGraphImpl
--  , text :: String
--  , position :: Point2D
--  , isValid :: Boolean
--  }
--
--createInterNodeImpl :: NodeIdSet -> Tuple NodeId InterEdgeImpl -> Effect InterNodeImpl
--createInterNodeImpl parentIds childEdges = do
--   nodeId <- genUUID
--   pure $ InterNodeImpl
--      { id : show nodeId
--      , children : Map.fromFoldable childEdges
--      , parents : parentIds
--      , subgraph : emptyInterGraphImpl
--      , text : ""
--      , position : { x: 0.0, y: 0.0 }
--      , isValid : true
--      }
--
--newtype InterEdgeImpl = InterEdgeImpl { source :: NodeId
--                                      , target :: NodeId
--                                      , isValid :: Boolean
--                                      }
--
--newEdgeImpl :: NodeId -> NodeId -> InterEdgeImpl
--newEdgeImpl source target = InterEdgeImpl { source : source
--                                          , target : target
--                                          , isValid : true
--                                          }
--
----lookupEdgeImpl :: NodeId -> NodeId -> InterGraphImpl -> Maybe InterEdgeImpl
----lookupEdgeImpl source target g = do
----  isValid <- view (_edgeData <<< at (edgeId source target)) g
----  pure $ InterEdgeImpl { source : source, target : target, isValid : isValid }
--
--
--------
---- Graph typeclass instances
--
--instance interNode :: InterNode InterNodeImpl where
--  _position = _position
--  _text = _textImpl
--
--instance interGraph :: InterGraph InterGraphImpl InterNodeImpl InterEdgeImpl where
--  _focus = _focusImpl
--  _highlighted = _highlightedImpl
--
--instance validatableInterGraph :: ValidatableGraph InterGraphImpl InterNodeImpl InterEdgeImpl where
--  _nodeValidity = _nodeValidityImpl
--  _edgeValidity = _edgeValidityImpl
--
--instance graphEdge :: Edge InterEdgeImpl where
--  _source = _sourceImpl
--  _target = _targetImpl
--
--instance graphNode :: Node InterNodeImpl where
--  createNode = createInterNodeImpl
--  _id = _idImpl
--  _parents = _parentsImpl
--  _children = _childrenImpl
--
--instance graph :: Graph InterGraphImpl InterNodeImpl InterEdgeImpl where
--  emptyGraph = emptyInterGraphImpl
--  _nodes = _nodes
--  _node = _nodeImpl
--  _edges = _edgesImpl
--  _edge = _edgeImpl
--  _subgraph = _subgraphImpl
--
--------
---- Generic serialisation boilerplate
--
--derive instance generic :: Generic InterGraphImpl _
--derive instance eq :: Eq InterGraphImpl
--instance encode :: Encode InterGraphImpl where
--  encode = genericEncode genericEncodeOpts
--instance decode :: Decode InterGraphImpl where
--  decode = genericDecode genericEncodeOpts
--
--derive instance genericNode :: Generic InterNodeImpl _
--derive instance eqNode :: Eq InterNodeImpl
--instance encodeNode :: Encode InterNodeImpl where
--  encode node = genericEncode genericEncodeOpts node
--instance decodeNode :: Decode InterNodeImpl where
--  decode node = genericDecode genericEncodeOpts node
--
--derive instance genericInterEdgeImpl :: Generic InterEdgeImpl _
--derive instance eqInterEdgeImpl :: Eq InterEdgeImpl
--instance encodeInterEdgeImpl :: Encode InterEdgeImpl where
--  encode x = genericEncode genericEncodeOpts x
--instance decodeInterEdgeImpl :: Decode InterEdgeImpl where
--  decode x = genericDecode genericEncodeOpts x
--
--derive instance genericInteractionState :: Generic InteractionState _
--derive instance eqInteractionState :: Eq InteractionState
--instance encodeInteractionState :: Encode InteractionState where
--  encode = genericEncode genericEncodeOpts
--instance decodeInteractionState :: Decode InteractionState where
--  decode = genericDecode genericEncodeOpts
--
--
--------
---- Lens boilerplate
--
--_InterGraphImpl :: Lens' InterGraphImpl { nodes :: Map NodeId InterNodeImpl
--                                        , interactionState :: InteractionState
--                                        }
--_InterGraphImpl = lens (\(InterGraphImpl g) -> g) (\_ -> InterGraphImpl)
--
--_nodes :: Lens' InterGraphImpl (Map NodeId InterNodeImpl)
--_nodes =
--  let
--    getter = view $ _InterGraphImpl <<< prop (SProxy :: SProxy "nodes")
--    setter g nodes = foldl
--                     (\g_ (Tuple id node) ->
--                       g_ # _nodeImpl id ?~ node
--                     )
--                     g
--                     $ Map.toUnfoldable nodes
--  in
--    lens getter setter
--
--_nodeImpl :: NodeId -> Lens' InterGraphImpl InterNodeImpl
--_nodeImpl id =
--  let
--    getter = view (_nodes <<< at id)
--    setter g maybeNode = case maybeNode of
--      Nothing -> removeNodeImpl id g
--      Just node -> g # (_nodes <<< at id) ?~ node
--  in
--    lens getter setter
--
--_edgesImpl :: Lens' InterGraphImpl (Map EdgeId InterGraphImpl)
--_edgesImpl =
--  let
--    getter g = view (_nodes <<< traversed <<< _children)
--    setter g edges =
--      foldl
--      (\g_ (Tuple (Tuple sourceId targetId) edge) ->
--          g_ # (_nodes <<< at sourceId <<< traversed <<< _children <<< at targetId) ?~ edge
--      )
--      $ Map.toUnfoldable edges
--  in
--    lens getter setter
--
--_edgeImpl :: NodeId -> NodeId -> Lens' InterGraphImpl (Maybe InterEdgeImpl)
--_edgeImpl sourceId targetId = view $ _nodes <<< at sourceId <<< traversed <<< _children <<< at targetId
--
----_edgeData :: Lens' InterGraphImpl (Object Boolean)
----_edgeData = _InterGraphImpl <<< prop (SProxy :: SProxy "edgeData")
--
--_interactionState :: Lens' InterGraphImpl InteractionState
--_interactionState = _InterGraphImpl <<< prop (SProxy :: SProxy "interactionState")
--
--_InteractionState :: Lens' InteractionState
--                           { focus :: Focus InterEdgeImpl
--                           , highlighted :: NodeIdSet
--                           }
--_InteractionState = lens (\(InteractionState s) -> s) (\_ -> InteractionState)
--
--_highlightedImpl :: Lens' InterGraphImpl NodeIdSet
--_highlightedImpl = _interactionState <<< _InteractionState <<< prop (SProxy :: SProxy "highlighted")
--
--_focusImpl :: Lens' InterGraphImpl (Focus InterEdgeImpl)
--_focusImpl = _interactionState <<< _InteractionState <<< prop (SProxy :: SProxy "focus")
--
--_InterNodeImpl :: Lens' InterNodeImpl { id :: NodeId
--                                      , children :: Map NodeId InterEdgeImpl
--                                      , parents :: NodeIdSet
--                                      , subgraph :: InterGraphImpl
--                                      , text :: String
--                                      , position :: Point2D
--                                      , isValid :: Boolean
--                                      }
--_InterNodeImpl = lens (\(InterNodeImpl n) -> n) (\_ -> InterNodeImpl)
--
--_parentsImpl :: Lens' InterNodeImpl NodeIdSet
--_parentsImpl = _InterNodeImpl <<< prop (SProxy :: SProxy "parents")
--
--_childrenImpl :: Lens' InterNodeImpl (Map NodeId InterEdgeImpl)
--_childrenImpl = _InterNodeImpl <<< prop (SProxy :: SProxy "children")
--
--_idImpl :: Lens' InterNodeImpl NodeId
--_idImpl = _InterNodeImpl <<< prop (SProxy :: SProxy "id")
--
--_subgraphImpl :: Lens' InterNodeImpl InterGraphImpl
--_subgraphImpl = _InterNodeImpl <<< prop (SProxy :: SProxy "subgraph")
--
--_position :: Lens' InterNodeImpl GraphPoint2D
--_position = _InterNodeImpl <<< prop (SProxy :: SProxy "position")
--
--_x :: Lens' InterNodeImpl Number
--_x = _position <<< prop (SProxy :: SProxy "x")
--
--_y :: Lens' InterNodeImpl Number
--_y = _position <<< prop (SProxy :: SProxy "y")
--
--_textImpl :: Lens' InterNodeImpl String
--_textImpl = _InterNodeImpl <<< prop (SProxy :: SProxy "text")
--
--_nodeValidityImpl :: Lens' InterNodeImpl Boolean
--_nodeValidityImpl = _InterNodeImpl <<< prop (SProxy :: SProxy "isValid")
--
--_InterEdgeImpl :: Lens' InterEdgeImpl { source :: NodeId
--                                      , target :: NodeId
--                                      , isValid :: Boolean
--                                      }
--_InterEdgeImpl = lens (\(InterEdgeImpl e) -> e) (\_ -> InterEdgeImpl)
--
--_sourceImpl :: Lens' InterEdgeImpl NodeId
--_sourceImpl = lens (\(InterEdgeImpl e) -> e.source) (\(InterEdgeImpl e) -> InterEdgeImpl (e { source = _}))
--
--_targetImpl :: Lens' InterEdgeImpl NodeId
--_targetImpl = lens (\(InterEdgeImpl e) -> e.target) (\(InterEdgeImpl e) -> InterEdgeImpl (e { target = _}))
--
--_edgeValidityImpl :: Lens' InterEdgeImpl Boolean
--_edgeValidityImpl = _InterEdgeImpl <<< prop (SProxy :: SProxy "isValid")
--
--_subgraphInteractionState :: Lens' InterNodeImpl InteractionState
--_subgraphInteractionState = _subgraph <<<
--                            _interactionState
--
--
--------
----  basic operations
--
----addParent :: NodeId -> InterNodeImpl -> InterNodeImpl
----addParent nodeId = over _parents $ insertNodeId nodeId
----
----deleteParent :: NodeId -> InterNodeImpl -> InterNodeImpl
----deleteParent nodeId = over _parents $ deleteNodeId nodeId
----
----addChild :: NodeId -> InterNodeImpl -> InterNodeImpl
----addChild nodeId = over _children $ insertNodeId nodeId
----
----deleteChild :: NodeId -> InterNodeImpl -> InterNodeImpl
----deleteChild nodeId = over _children $ deleteNodeId nodeId
----
----insertNodeImpl :: InterNodeImpl -> InterGraphImpl -> InterGraphImpl
----insertNodeImpl newNode g =
----  setJust (_nodes <<< (at (viewId newNode))) newNode g
--
--removeNodeImpl :: NodeId -> InterGraphImpl -> InterGraphImpl
--removeNodeImpl nodeId =
--  (_nodes <<< (at nodeId)) .~ Nothing
--  $ (_nodes <<< traversed <<< _parents <<< at nodeId) .~ Nothing
--  $ (_nodes <<< traversed <<< _children <<< at nodeId) .~ Nothing
--
----updateEdgeData :: NodeId -> NodeId -> Maybe Boolean -> InterGraphImpl -> InterGraphImpl
----updateEdgeData source target newData g = case newData of
----  Nothing -> over _edgeData (Object.delete (edgeId source target)) g
----  Just valid -> over _edgeData (Object.insert (edgeId source target) valid) g
----
----addEdgeImpl :: InterEdgeImpl -> InterGraphImpl -> InterGraphImpl
----addEdgeImpl (InterEdgeImpl edge) =
----  (over _edgeData (Object.insert
----                   (edgeId edge.source edge.target)
----                   (view _edgeIsValid (InterEdgeImpl edge))))
----  <<<
----  (over (_nodes <<< (at edge.target)) $ map $ addParent edge.source)
----  <<<
----  (over (_nodes <<< (at edge.source)) $ map $ addChild edge.target)
----
----removeEdgeImpl :: NodeId -> NodeId -> InterGraphImpl -> InterGraphImpl
----removeEdgeImpl source target =
----  (updateEdgeData source target Nothing)
----  <<<
----  (over (_nodes <<< (at target)) $ map $ deleteParent source)
----  <<<
----  (over (_nodes <<< (at source)) $ map $ deleteChild target)
----
----replaceSubgraph' :: InterGraphImpl -> InterNodeImpl -> InterNodeImpl
----replaceSubgraph' = set _subgraph
----
----lookupNodeImpl :: NodeId -> InterGraphImpl -> Maybe InterNodeImpl
----lookupNodeImpl nodeId g = view (_nodes <<< at nodeId) g
----
----lookupEdgeData :: NodeId -> NodeId -> InterGraphImpl -> Maybe Boolean
----lookupEdgeData source target g = do
----  Object.lookup (edgeId source target) $ view _edgeData g
----
----updateNodePositionImpl :: Point2D -> NodeId -> InterGraphImpl -> InterGraphImpl
----updateNodePositionImpl newPos nodeId =
----  over (_nodes <<< (at nodeId)) $ map $ moveNode newPos
----
----moveNodeImpl :: Point2D -> InterNodeImpl -> InterNodeImpl
----moveNodeImpl pos = set _x pos.x <<<
----                   set _y pos.y
----
----moveNodeAmountImpl :: Point2D -> InterNodeImpl -> InterGraphImpl -> InterGraphImpl
----moveNodeAmountImpl motion node g =
----  let newPos = add {x: viewX node, y: viewY node} motion in
----  updateNodePosition newPos (viewId node) g
----
----
----------
------ Focusing
----
----viewFocusImpl :: InterGraphImpl -> Focus InterEdgeImpl
----viewFocusImpl = view _focus
----
----updateFocusImpl :: Focus InterEdgeImpl -> InterGraphImpl -> InterGraphImpl
----updateFocusImpl = set _focus
----
----
----------
------ Highlighting
----
----highlightImpl :: NodeId -> InterGraphImpl -> InterGraphImpl
----highlightImpl nodeId = over _highlighted (Object.insert nodeId unit)
----
----unHighlightImpl :: NodeId -> InterGraphImpl -> InterGraphImpl
----unHighlightImpl nodeId = over _highlighted (Object.delete nodeId)
----
----
----------
------ Validity
----
----updateNodeValidityImpl :: Boolean -> NodeId -> InterGraphImpl -> InterGraphImpl
----updateNodeValidityImpl validity nodeId = over (_nodes <<< (at nodeId)) (map (set _nodeIsValid validity))
----
----updateEdgeValidityImpl :: Boolean -> InterEdgeImpl -> InterGraphImpl -> InterGraphImpl
----updateEdgeValidityImpl validity (InterEdgeImpl edge) g =
----  updateEdgeData edge.source edge.target (Just validity) g
----
----
----------
------ Text
----
----updateTextImpl :: NodeId -> String -> InterGraphImpl -> InterGraphImpl
----updateTextImpl nodeId newText = over (_nodes <<< at nodeId) (map (set _text newText))
--
--
--------
---- Demo
--
--demo :: InterGraphImpl
--demo = _focus .~ (FocusEdge (InterEdgeImpl { source: "title"
--                                           , target: "goofus"
--                                           , isValid: false
--                                           })
--                  [InterEdgeImpl { source: "title"
--                                 , target: "goofus"
--                                 , isValid: false
--                                 },
--                   InterEdgeImpl { source: "thingo"
--                                 , target: "goofus"
--                                 , isValid: false
--                                 }])
--       $ _highlighted %~ Set.insert "thingo"
--       $ _edges %~ Map.insert
--                   (Tuple "title" "goofus")
--                   (InterEdgeImpl { source : "title"
--                                  , target : "goofus"
--                                  , isValid : false
--                                  })
--       $ _nodes %~ Map.insert
--                   "title"
--                   (InterNodeImpl { text: "Title: Workflow"
--                                  , isValid: true
--                                  , position : { x : 205.0
--                                               , y : 150.0
--                                               }
--                                  , id : "title"
--                                  , parents : Set.empty
--                                  , children : Map.empty
--                                  , subgraph : emptyInterGraphImpl
--                                  })
--       $ _edges %~ Map.insert
--                   (Tuple "thingo" "goofus")
--                   (InterEdgeImpl { source : "thingo"
--                                  , target : "goofus"
--                                  , isValid : false
--                                  })
--       $ _nodes %~ Map.insert
--                   "thingo"
--                   (InterNodeImpl { text: "thingo"
--                                  , isValid: true
--                                  , position : { x : 205.0
--                                               , y : 100.0
--                                               }
--                                  , id : "thingo"
--                                  , parents : Set.empty
--                                  , children : Map.empty
--                                  , subgraph : emptyInterGraphImpl
--                                  })
--       $ _nodes %~ Map.insert
--                   "goofus"
--                   (InterNodeImpl { text: "asdf"
--                                  , isValid: true
--                                  , position : { x: 450.0
--                                               , y: 270.0
--                                               }
--                                  , id : "goofus"
--                                  , parents : Set.empty
--                                  , children : Map.empty
--                                  , subgraph : emptyInterGraphImpl
--                                  })
--       $ emptyInterGraphImpl
--
---- TODO: re-export to JS using module system properly
--fromMaybe_ :: forall a. a -> Maybe a -> a
--fromMaybe_ = fromMaybe
--
---- type-narrowed export so js doesn't have to do annoying typeclass dict passing
--interGraphToJSON :: InterGraphImpl -> String
--interGraphToJSON = graphToJSON
--
--interGraphFromJSON :: String -> ExceptT (NonEmptyList ForeignError) Identity InterGraphImpl
--interGraphFromJSON = graphFromJSON
